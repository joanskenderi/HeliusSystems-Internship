@using ProjektInternship2022.MVC.Models
@model EmployeeTask
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="row">
        @using (Ajax.BeginForm("Edit", "Task",
                new AjaxOptions()
                {
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "content",
                    OnSuccess = "window.history.pushState(null, '', '/Task/Index');"
                }))
        {
            <fieldset class="well the-fieldset">
                <legend class="the-legend"><span>Actions</span></legend>
                <div class="pull-right">
                    <button type="submit" name="Save" class="btn btn-primary btn-sm"><i class="glyphicon glyphicon-ok"></i> Save</button>
                </div>
            </fieldset>

            <fieldset class="well the-fieldset">
                <legend class="the-legend"><span>Creating new Task</span></legend>
                <div class="form-horizontal row">
                    <div class="form-group">
                        <div class="col-xs-2 control-label">
                            Code
                        </div>
                        <div class="col-xs-8">
                            @Html.TextBoxFor(model => model.Code, new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(model => model.Code)
                        </div>
                    </div>
                </div>

                <div class="form-horizontal row">
                    <div class="form-group">
                        <div class="col-xs-2 control-label">
                            Summary
                        </div>
                        <div class="col-xs-8">
                            @Html.TextBoxFor(model => model.Summary, new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(model => model.Summary)
                        </div>
                    </div>
                </div>
                <div class="form-horizontal row">
                    <div class="form-group">
                        <div class="col-xs-2 control-label">
                            Description
                        </div>
                        <div class="col-xs-8">
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(model => model.Description)
                        </div>
                    </div>
                </div>
                <div class="form-horizontal row">
                    <div class="form-group">
                        <div class="col-xs-2 control-label">
                            Due Date
                        </div>
                        <div class="col-xs-8">
                            @if (Model.DueDate == DateTime.MinValue)
                            {
                                @(Html.Kendo().DatePickerFor(model => model.DueDate).Min("01/01/2000").Value(DateTime.Now.AddDays(1)))
                            }
                            else
                            {
                                @(Html.Kendo().DatePickerFor(model => model.DueDate).Min("01/01/2000"))
                            }
                            @Html.ValidationMessageFor(model => model.DueDate)
                        </div>
                    </div>
                </div>
                <div class="form-horizontal row">
                    <div class="form-group">
                        <div class="col-xs-2 control-label">
                            Statusi
                        </div>
                        <div class="col-xs-8">
                            @(Html.Kendo().DropDownListFor(model => model.StatusId)
                                    .OptionLabel("Zgjidh")
                                    .DataTextField("StatusName")
                                    .DataValueField("StatusId")
                                    .DataSource(ds =>
                                        ds.Read(read =>
                                        {
                                            read.Action("GetStatus", "Task");
                                        })
                                    )

                                )
                            @Html.ValidationMessageFor(model => model.StatusId)
                        </div>
                    </div>
                </div>
                @Html.HiddenFor(model => model.TaskId, new { Name = "Id" })


                @(Html.Kendo().Grid<TaskClient>(Model.Clients)
                    .Name("TaskClients")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.Id).Hidden();//.ClientTemplate("#= Id # <input type='hidden' name='Clients[#= calcIndex(data)#].Id' value='#= Id #' />");
                        columns.Bound(p => p.TaskId).Hidden();//.ClientTemplate("#= TaskId # <input type='hidden' name='Clients[#= calcIndex(data)#].TaskId' value='#= TaskId #' />");

                        columns.Bound(p => p.FirstName).Title("First Name").Width("33%");//.ClientTemplate("#= FirstName # <input type='hidden' name='Clients[#= calcIndex(data)#].FirstName' value='#= FirstName #' />");
                        columns.Bound(p => p.LastName).Title("Last Name").Width("33%");//.ClientTemplate("#= LastName # <input type='hidden' name='Clients[#= calcIndex(data)#].LastName' value='#= LastName #' />");
                        columns.Bound(p => p.IsNotified).Title("Is Notified").Width("33%");//.ClientTemplate("<input type='checkbox' # if(IsNotified){# checked #}#  <input type='hidden' name='Clients[#= calcIndex(data)#].IsNotified' value='#= IsNotified #' />");

                    })
                    .ToolBar(toolbar => toolbar.Create().HtmlAttributes(new { @class = "k-button k-button-icontext", @id = "AddResPartnerFinancialConfigRel" }).Text("Add Client"))
                    .Editable(editable => editable.Mode(GridEditMode.InCell))
                    .Scrollable(sc => sc.Enabled(true).Height("auto"))
                    //.Events(events => events.DataBound("setCustomerGridVisibility"))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(true)
                        .ServerOperation(false)
                        .Model(model =>
                        {
                            model.Id(o => o.Id);

                            model.Field(p => p.Id).Editable(false);
                            model.Field(p => p.TaskId).Editable(false);
                            model.Field(p => p.IsNotified).Editable(false);
                        })
                        )
                    )
            </fieldset>
        }
    </div>
</div>

<script src="~/Scripts/Task/Task.js"></script>
